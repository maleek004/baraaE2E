-- Fabric notebook source

-- METADATA ********************

-- META {
-- META   "kernel_info": {
-- META     "name": "sqldatawarehouse"
-- META   },
-- META   "dependencies": {
-- META     "warehouse": {
-- META       "default_warehouse": "6d92e802-0ef3-b21e-439c-f98c3968ed05",
-- META       "known_warehouses": [
-- META         {
-- META           "id": "6d92e802-0ef3-b21e-439c-f98c3968ed05",
-- META           "type": "Datawarehouse"
-- META         }
-- META       ]
-- META     }
-- META   }
-- META }

-- MARKDOWN ********************

-- # Key metrics report 

-- CELL ********************

SELECT 'Total Sales' AS [measure name], FORMAT(SUM([revenue]), 'N0') AS [value] FROM dbo.vw_fact_sales
UNION ALL
SELECT 'Total Quantity', FORMAT(SUM(quantity),'N0') FROM dbo.vw_fact_sales
UNION ALL
SELECT 'Average Price', FORMAT(AVG(price),'N0') FROM dbo.vw_fact_sales
UNION ALL
SELECT 'Total Orders', FORMAT(COUNT(DISTINCT [order_number]),'N0') FROM dbo.vw_fact_sales
UNION ALL
SELECT 'Total Products', FORMAT(COUNT(DISTINCT [product_key]),'N0') FROM dbo.vw_fact_sales
UNION ALL
SELECT 'Total Customers', FORMAT(COUNT(DISTINCT [customer_key]),'N0') FROM dbo.vw_fact_sales;



-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- MARKDOWN ********************

-- ### What is the **total items sold** and **revenue** in each country by gender 


-- CELL ********************

SELECT c.country
        , c.gender
        ,COUNT(DISTINCT s.[customer_key]) [no customers]
        , COUNT(s.[order_number]) [no items sold]
        , sum(s.[revenue]) revenue
FROM dbo.vw_fact_sales s
LEFT JOIN dbo.vw_dim_customers c
ON s.[customer_key] = c.[customer_key]
GROUP BY c.country , c.gender
ORDER BY c.country ASC, revenue DESC

-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- MARKDOWN ********************

-- ## What is the **average cost** and **total revenue** generated by each product category

-- CELL ********************

SELECT p.[product category], AVG(p.[product cost]) [Average product cost], SUM(s.[revenue]) [Revenue]
FROM dbo.vw_fact_sales s 
LEFT JOIN dbo.VW_Dim_products p
ON s.[product_key] = p.[product_key]
GROUP BY p.[product category]

    

-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- CELL ********************

### Verify that no orders has been made for the 'Components' product category
SELECT [order_number]
FROM dbo.vw_fact_sales
WHERE [product_key] IN (
    SELECT [product_key]
    FROM dbo.VW_Dim_products
    WHERE [product category] = 'Components'

)

-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- MARKDOWN ********************

-- ### When wast the **first and latest order** made and whats the **duration** between them

-- CELL ********************

SELECT 
    MIN([order date]) AS [first order date],
    MAX([order date]) AS [last order date],
    DATEDIFF(MONTH, MIN([order date]), MAX([order date])) AS [order range in months]
FROM dbo.vw_fact_sales;

-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- MARKDOWN ********************

-- ### What is the **5th and 15th highest ranking products** based on revenue generated

-- CELL ********************

SELECT *
FROM (
    SELECT
        p.[product name],
        SUM(s.[revenue]) AS [total revenue],
        RANK() OVER (ORDER BY SUM(s.[revenue]) DESC) AS [revenue rank]
    FROM dbo.vw_fact_sales s
    LEFT JOIN dbo.VW_Dim_products p
        ON p.[product_key] = s.[product_key]
    GROUP BY p.[product name]
) AS ranked

WHERE ranked.[revenue rank] IN (5, 15)

-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- MARKDOWN ********************

-- ### Who are the top 5 customers with the highest revenue (and their age)

-- CELL ********************

SELECT TOP(5) c.[first name] + ' ' + c.[last name] AS [Customer Name]
              , DATEDIFF(year, c.[birth date], GETDATE()) Age
              , SUM(s.[revenue]) AS revenue

FROM dbo.vw_fact_sales s
LEFT JOIN dbo.vw_dim_customers c
ON c.[customer_key] = s.[customer_key]
GROUP BY c.[first name] + ' ' + c.[last name], DATEDIFF(year, c.[birth date], GETDATE())
ORDER BY SUM(s.[revenue]) DESC 

-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- MARKDOWN ********************

-- ### Total Sales and orders over time 

-- CELL ********************

SELECT
    DATETRUNC(month, [order date]) AS order_date,
    SUM([revenue]) AS Sales,
    COUNT(DISTINCT [order_number]) AS orders
FROM dbo.vw_fact_sales
WHERE [order date] IS NOT NULL
GROUP BY DATETRUNC(month, [order date])
ORDER BY DATETRUNC(month, [order date]);

-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- MARKDOWN ********************

-- ### Was sales Accelerating , Stable or declining within the past years

-- CELL ********************

SELECT
	order_month,
	--total_sales,
	SUM(total_sales) OVER (PARTITION BY DATETRUNC(year, order_month) ORDER BY order_month) AS running_total_sales
	--AVG(avg_price) OVER (ORDER BY order_month) AS moving_average_price
FROM
(
    SELECT 
        DATETRUNC(month, [order date]) AS order_month,
        SUM([revenue]) AS total_sales,
        AVG(price) AS avg_price
    FROM dbo.vw_fact_sales
    WHERE [order date] IS NOT NULL
    GROUP BY DATETRUNC(month, [order date])
) t

-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- MARKDOWN ********************

-- ## Which products are selling better than average ?

-- CELL ********************

WITH total_product_sales AS (
    SELECT [product_key], SUM([revenue]) AS salesPerProduct
    FROM dbo.vw_fact_sales
    GROUP BY [product_key]
)

SELECT p.[product name]
        , SUM(s.[revenue]) [product's revenue]
        , (SELECT AVG([salesPerProduct]) FROM total_product_sales) [Avg product_sales_amount]
FROM dbo.vw_fact_sales s
JOIN dbo.VW_Dim_products p
on s.[product_key] = p.[product_key]
GROUP BY [product name]
HAVING SUM(s.[revenue]) > (SELECT AVG([salesPerProduct]) FROM total_product_sales)
ORDER BY [product's revenue] desc


-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- MARKDOWN ********************

-- ### compare each product's  yearly sales  to its average yearly sales performance

-- CELL ********************

WITH yearlySalesTable as(
SELECT [product_key], YEAR([order date]) [year], SUM([revenue]) [yearly sales]
FROM dbo.vw_fact_sales
WHERE year([order date]) IS NOT NULL
GROUP BY [product_key], YEAR([order date]) 
)

SELECT p.[product name]
        , year 
        ,[yearly sales]
        , AVG([yearly sales]) OVER(PARTITION BY t1.[product_key] ) avg_yearly_sales
        , [yearly sales] - AVG([yearly sales]) OVER(PARTITION BY t1.[product_key] ) diff_from_yearly_average
        , CASE 
            WHEN [yearly sales] - AVG([yearly sales]) OVER(PARTITION BY t1.[product_key] ) > 0 THEN 'Above Average Performance'
            WHEN [yearly sales] - AVG([yearly sales]) OVER(PARTITION BY t1.[product_key] ) < 0 THEN 'Below Average Performance'
            ELSE 'Average Performance'
          END [Yearly average performance]
FROM yearlySalesTable t1
JOIN dbo.VW_Dim_products p
ON t1.[product_key] = p.[product_key]

ORDER BY p.[product name], [year]




-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- MARKDOWN ********************

-- ### How does each country contribute to the overall sales

-- CELL ********************

WITH SalesByCountry AS (
    SELECT c.country 
        , sum([revenue]) [country sales]
    FROM dbo.vw_fact_sales s
    LEFT JOIN dbo.vw_dim_customers c
    ON s.[customer_key] = c.[customer_key]
    WHERE c.country != 'n/a' 
    GROUP BY c.country 
    )

SELECT country 
        , [country sales]
        , SUM([country sales]) OVER() [overall sales]
        , CONCAT( Round((cast([country sales] AS float)  / SUM([country sales]) OVER()) * 100 ,2), '%')
FROM SalesByCountry
ORDER BY [country sales] DESC

-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- MARKDOWN ********************

-- ### Show products in these segments:
-- * `Premium`: High cost, high sales
-- * `Popular`: Low cost, high sales
-- * `Expensive` Slow Movers: High cost, low sales
-- * `Cheap Low Performers`: Low cost, low sales

-- CELL ********************

WITH ProductStats AS (
    SELECT 
        s.[product_key],
        p.[product name],
        p.[product cost],
        SUM(s.[revenue]) AS total_sales
    FROM dbo.vw_fact_sales s
    LEFT JOIN dbo.VW_Dim_products p 
        ON s.[product_key] = p.[product_key]
    GROUP BY s.[product_key], p.[product name], p.[product cost]
),
OverallStats AS (
    SELECT 
        AVG([product cost]) AS avg_cost,
        AVG(total_sales) AS avg_sales
    FROM ProductStats
)
SELECT 
    ps.[product name],
    ps.[product cost],
    ps.total_sales,
    CASE 
        WHEN ps.[product cost] >= os.avg_cost AND ps.total_sales >= os.avg_sales THEN 'Premium'
        WHEN ps.[product cost] < os.avg_cost AND ps.total_sales >= os.avg_sales THEN 'Popular'
        WHEN ps.[product cost] >= os.avg_cost AND ps.total_sales < os.avg_sales THEN 'Expensive Slow Mover'
        WHEN ps.[product cost] < os.avg_cost AND ps.total_sales < os.avg_sales THEN 'Cheap Low Performer'
    END AS product_segment
FROM ProductStats ps
CROSS JOIN OverallStats os
ORDER BY product_segment, total_sales DESC;

-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }

-- MARKDOWN ********************


-- CELL ********************

WITH base_query AS (
    /*---------------------------------------------------------------------------
    1) Base Query: Join fact and product dimension tables
    ---------------------------------------------------------------------------*/
    SELECT
        f.[order_number],
        f.[product_key],
        f.[order date],
        f.[revenue],
        f.quantity,
        p.[product name],
        p.[product category],
        p.[product cost]
    FROM dbo.vw_fact_sales f
    LEFT JOIN dbo.VW_Dim_products p
        ON p.[product_key] = f.[product_key]
    WHERE f.[order date] IS NOT NULL
),

product_aggregation AS (
    /*---------------------------------------------------------------------------
    2) Product Aggregations: Summarize metrics per product
    ---------------------------------------------------------------------------*/
    SELECT
        [product_key],
        [product name],
        [product category],
        [product cost],
        COUNT(DISTINCT [order_number]) AS total_orders,
        SUM([revenue]) AS total_sales,
        SUM(quantity) AS total_quantity,
        MAX([order date]) AS last_sold_date,
        DATEDIFF(month, MIN([order date]), MAX([order date])) AS lifespan
    FROM base_query
    GROUP BY
        [product_key],
        [product name],
        [product category],
        [product cost]
)

SELECT
    [product_key],
    [product name],
    [product category],
    [product cost],

    -- Segment products by cost and sales performance
    CASE 
         WHEN [product cost] >= 100 AND total_sales >= 10000 THEN 'Premium Seller'
         WHEN [product cost] < 100 AND total_sales >= 10000 THEN 'Popular Budget'
         WHEN [product cost] >= 100 AND total_sales < 10000 THEN 'Expensive Slow Mover'
        ELSE 'Low Cost Low Sales'
    END AS product_segment,

    last_sold_date,
    DATEDIFF(month, last_sold_date, GETDATE()) AS recency,
    total_orders,
    total_sales,
    total_quantity,
    lifespan,

    -- Compute average order value
    CASE WHEN total_orders = 0 THEN 0
         ELSE total_sales * 1.0 / total_orders
    END AS avg_order_value,

    -- Compute average unit price
    CASE WHEN total_quantity = 0 THEN [product cost]
         ELSE total_sales * 1.0 / total_quantity
    END AS avg_unit_price,

    -- Compute average monthly sales
    CASE WHEN lifespan = 0 THEN total_sales
         ELSE total_sales * 1.0 / lifespan
    END AS avg_monthly_sales

FROM product_aggregation;

-- METADATA ********************

-- META {
-- META   "language": "sql",
-- META   "language_group": "sqldatawarehouse"
-- META }
